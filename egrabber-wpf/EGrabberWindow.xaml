<Window x:Class="EGrabberWPF.EGrabberWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        
        xmlns:Controls="clr-namespace:System.Windows.Controls;assembly=MultiSelectTreeView"
        xmlns:demo="clr-namespace:EGrabberWPF"
	    xmlns:vm="clr-namespace:EGrabberWPF.ViewModel"
	    xmlns:sys="clr-namespace:System;assembly=mscorlib"
        TextOptions.TextFormattingMode="Display"
	    UseLayoutRounding="True"
        mc:Ignorable="d"
        Loaded="EGrabberChildWindow_Loaded" 
        Title="EGrabberWindow" Name="EGrabberChildWindow"
        Background="{DynamicResource {x:Static SystemColors.ControlBrushKey}}">

    <Window.Resources>
        <!--
		Here the normal editor template is defined
		-->
        <DataTemplate x:Key="EditTemplate" DataType="{x:Type vm:TreeItemViewModel}">
            <StackPanel Orientation="Horizontal">
                <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16"/>
                <Controls:EditTextBox
					Text="{Binding DisplayName, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
					Padding="2,0,0,0"/>
            </StackPanel>
        </DataTemplate>

        <!--
		This is a specialised editor template for ColorItemViewModel items
		-->
        <ObjectDataProvider x:Key="colorsTypeOdp" ObjectType="{x:Type sys:Type}" MethodName="GetType">
            <ObjectDataProvider.MethodParameters>
                <sys:String>System.Windows.Media.Colors, PresentationCore, Version=3.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35</sys:String>
            </ObjectDataProvider.MethodParameters>
        </ObjectDataProvider>
        <ObjectDataProvider x:Key="colorPropertiesOdp" ObjectInstance="{StaticResource colorsTypeOdp}" MethodName="GetProperties"/>
        <DataTemplate x:Key="ColorEditTemplate" DataType="{x:Type vm:ColorItemViewModel}">
            <StackPanel Orientation="Horizontal">
                <TextBlock Text="Colour:" VerticalAlignment="Center"/>
                <ComboBox
					Width="170" Margin="6,0,0,0"
					ItemsSource="{Binding Source={StaticResource colorPropertiesOdp}}"
					SelectedValue="{Binding Color}"
					SelectedValuePath="Name">
                    <ComboBox.ItemTemplate>
                        <DataTemplate>
                            <StackPanel Orientation="Horizontal">
                                <Rectangle Margin="0,1,4,1" Width="15" Fill="{Binding Name}"/>
                                <TextBlock Text="{Binding Name}"/>
                            </StackPanel>
                        </DataTemplate>
                    </ComboBox.ItemTemplate>
                </ComboBox>
            </StackPanel>
        </DataTemplate>

        <!--
		The following selector selects a DataTemplate based on the type of an item. It is only
		required when using multiple different editor templates. If you do not use editing
		functionality of items at all or only need a single editor template, you can omit these
		template definitions and the selector and just define the template further down where it
		is noted.
		-->
        
        <demo:TypeTemplateSelector x:Key="EditorTemplateSelector">
            <demo:TypeTemplateSelector.TemplateDefinitions>
                <demo:TypeTemplateDefinition
					Type="{x:Type vm:ColorItemViewModel}" Template="{StaticResource ColorEditTemplate}"/>
                <demo:TypeTemplateDefinition
					Type="{x:Type vm:TreeItemViewModel}" Template="{StaticResource EditTemplate}"/>
            </demo:TypeTemplateSelector.TemplateDefinitions>
        </demo:TypeTemplateSelector>
        
        <BooleanToVisibilityConverter x:Key="BoolToVisibility"/>
    </Window.Resources>

    <DockPanel>
        <Grid>
            <Grid.RowDefinitions>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="*"></RowDefinition>
                <RowDefinition Height="35"></RowDefinition>
            </Grid.RowDefinitions>
            <Grid.ColumnDefinitions>
                <ColumnDefinition>
                </ColumnDefinition>
                <ColumnDefinition>
                </ColumnDefinition>
            </Grid.ColumnDefinitions>

            <Image x:Name="EGrabberImage" HorizontalAlignment="Left" VerticalAlignment="Top" Grid.Row="0" Grid.Column="0"/>

            <Button Content="Show Image" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Left"  VerticalAlignment="Top" Width="128" Margin="10,10,0,0" Click="Button_Show"/>
            <Button Content="Decode" Grid.Row="0" Grid.Column="1" HorizontalAlignment="Left" Margin="10,47,0,0" VerticalAlignment="Top" Width="128" Click="Button_Decode"/>
            <TextBlock Text="DecodePath" Grid.Row="0" Grid.Column="1" FontWeight="Bold" Margin="215,19,90,193" RenderTransformOrigin="0.554,0.814"/>

            <StatusBar Grid.Row="2" Grid.Column="0" Grid.ColumnSpan="2" VerticalAlignment="Bottom" Name="EGrabberStatusBar">
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                </Grid>
                <StatusBarItem>
                    <Label Content="PixelFormat:"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock Name="statusPixelFormat">-</TextBlock>
                </StatusBarItem>
                <StatusBarItem>
                    <Label Content="Resolution:"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock Name="statusResolution">-</TextBlock>
                </StatusBarItem>
                <StatusBarItem>
                    <Label Content="Frame Rate:"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock  Name="statusFrameRate">-</TextBlock>
                </StatusBarItem>
                <StatusBarItem>
                    <Label Content="Image ID:"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock  Name="statusImageID">-</TextBlock>
                </StatusBarItem>
                <StatusBarItem>
                    <Label Content="Overflow Times:"/>
                </StatusBarItem>
                <StatusBarItem>
                    <TextBlock  Name="statusOverflowTimes">-</TextBlock>
                </StatusBarItem>
                <StatusBarItem>
                    <Label Content="FileID:"/>
                </StatusBarItem>
                <TextBlock  Name="statusFileID">-</TextBlock>
            </StatusBar>

            <!--  TreeView Start  -->
            <Controls:MultiSelectTreeView
				Name="TheTreeView"
                Grid.Row="1" Grid.Column="0"
				ItemsSource="{Binding Children}"
				PreviewSelectionChanged="TheTreeView_PreviewSelectionChanged">

                <Controls:MultiSelectTreeView.ContextMenu>
                    <ContextMenu>
                        <MenuItem Header="Expand" Click="ExpandMenuItem_Click"/>
                        <Separator/>
                        <MenuItem Header="Rename" Click="RenameMenuItem_Click"/>
                        <MenuItem Header="ClickShow" Click="NodeMouseClick"/>
                    </ContextMenu>
                </Controls:MultiSelectTreeView.ContextMenu>
                
                <Controls:MultiSelectTreeView.ItemContainerStyle>
                    <Style TargetType="{x:Type Controls:MultiSelectTreeViewItem}">
                        <!--
						Here the TreeViewItem's properties are connected with the ViewModel class.
						Basically you would make all MultiSelectTreeViewItem properties accessible
						in the view model class that you possibly want to get or set in order to
						determine or manipulate the view from the view model class.
						-->
                        <Setter Property="DisplayName" Value="{Binding DisplayName, Mode=TwoWay}"/>
                        <Setter Property="IsExpanded" Value="{Binding IsExpanded, Mode=TwoWay}"/>
                        <Setter Property="IsSelected" Value="{Binding IsSelected, Mode=TwoWay}"/>
                        <Setter Property="IsEnabled" Value="{Binding IsEnabled, Mode=TwoWay}"/>
                        <Setter Property="IsVisible" Value="{Binding IsVisible, Mode=TwoWay}"/>
                        <Setter Property="IsEditable" Value="{Binding IsEditable, Mode=TwoWay}"/>
                        <Setter Property="IsEditing" Value="{Binding IsEditing, Mode=TwoWay}"/>
                        <Setter Property="Remarks" Value="{Binding Remarks, Mode=TwoWay}"/>
                        <!--
						The ContentTemplateEdit property defines a DataTemplate that is applied
						instead of the normal viewing DataTemplate (definition below) when the item
						is in edit mode. If you do not need editing functionality or the default
						template is good for you, then you can omit this Setter.
						-->
                        
                      
                        <Setter Property="RemarksTemplate">
                            <Setter.Value>
                                <DataTemplate>
                                    <TextBlock VerticalAlignment="Center" Margin="3,0,0,0" Foreground="#a0ff0000" FontStyle="Italic" Text="{Binding}">
                                        <TextBlock.Style>
                                            <Style TargetType="TextBlock">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding}" Value="{x:Null}">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                    <DataTrigger Binding="{Binding}" Value="">
                                                        <Setter Property="Visibility" Value="Collapsed"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </TextBlock.Style>
                                    </TextBlock>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                    </Style>
                </Controls:MultiSelectTreeView.ItemContainerStyle>

                <Controls:MultiSelectTreeView.Resources>
                    <!--
					Here the general item appearance is defined, for the ViewModel.TreeItemViewModel type
					-->
                    <HierarchicalDataTemplate DataType="{x:Type vm:TreeItemViewModel}" ItemsSource="{Binding Children}">
                        <StackPanel Orientation="Horizontal">
                            <Border Background="YellowGreen" CornerRadius="3" Width="16" Height="16" SnapsToDevicePixels="True"/>
                            <TextBlock Text="{Binding DisplayName}" VerticalAlignment="Center" Padding="4,0,2,0"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>

                    <!--
					This is another item appearance for the ViewModel.ColorItemViewModel type
					-->
                    <HierarchicalDataTemplate DataType="{x:Type vm:ColorItemViewModel}" ItemsSource="{Binding Children}">
                        <StackPanel Orientation="Horizontal">
                            <TextBlock Text="Colour:" Margin="1,0,0,0"/>
                            <TextBlock
								Text="{Binding DisplayName}"
								Background="{Binding BackgroundBrush}"
								Foreground="{Binding ForegroundBrush}"
								Padding="3,0"
								Margin="6,0,0,0"/>
                        </StackPanel>
                    </HierarchicalDataTemplate>
                </Controls:MultiSelectTreeView.Resources>
            </Controls:MultiSelectTreeView>
            
            <StackPanel Orientation="Horizontal" Grid.Row="1" Grid.Column="1">
                <CheckBox
					x:Name="LockSelectionCheck"
					Content="Lock"
					Margin="12,108,0,109"
					VerticalAlignment="Center"
					ToolTip="Prevent any change to the selection by the user" Checked="LockSelectionCheck_Checked"
                    />
            </StackPanel>
            
        </Grid>
    </DockPanel>
</Window>
